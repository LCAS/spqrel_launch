.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::SVN::Editor 3pm"
.TH Git::SVN::Editor 3pm "2017-06-24" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::SVN::Editor \- commit driver for "git svn set\-tree" and dcommit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Git::SVN::Editor;
\&        use Git::SVN::Ra;
\&
\&        my $ra = Git::SVN::Ra\->new($url);
\&        my %opts = (
\&                r => 19,
\&                log => "log message",
\&                ra => $ra,
\&                config => SVN::Core::config_get_config($svn_config_dir),
\&                tree_a => "$commit^",
\&                tree_b => "$commit",
\&                editor_cb => sub { print "Committed r$_[0]\en"; },
\&                mergeinfo => "/branches/foo:1\-10",
\&                svn_path => "trunk"
\&        );
\&        Git::SVN::Editor\->new(\e%opts)\->apply_diff or print "No changes\en";
\&
\&        my $re = Git::SVN::Editor::glob2pat("trunk/*");
\&        if ($branchname =~ /$re/) {
\&                print "matched!\en";
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an implementation detail of the \*(L"git svn\*(R" command.
Do not use it unless you are developing git-svn.
.PP
This module adapts the \f(CW\*(C`SVN::Delta::Editor\*(C'\fR object returned by
\&\f(CW\*(C`SVN::Delta::get_commit_editor\*(C'\fR and drives it to convey the
difference between two git tree objects to a remote Subversion
repository.
.PP
The interface will change as git-svn evolves.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Subversion perl bindings,
the core Carp module,
and git's Git helper module.
.PP
\&\f(CW\*(C`Git::SVN::Editor\*(C'\fR has not been tested using callers other than
\&\fBgit-svn\fR itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SVN::Delta,
Git::SVN::Fetcher.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS"
.IX Header "BUGS"
None.
