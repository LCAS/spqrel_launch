.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::SVN::Utils 3pm"
.TH Git::SVN::Utils 3pm "2017-06-24" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::SVN::Utils \- utility functions used across Git::SVN
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Git::SVN::Utils qw(functions to import);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains functions which are useful across many different
parts of Git::SVN.  Mostly it's a place to put utility functions
rather than duplicate the code or have classes grabbing at other
classes.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
All functions can be imported only on request.
.PP
\fIfatal\fR
.IX Subsection "fatal"
.PP
.Vb 1
\&    fatal(@message);
.Ve
.PP
Display a message and exit with a fatal error code.
.PP
\fIcan_compress\fR
.IX Subsection "can_compress"
.PP
.Vb 1
\&    my $can_compress = can_compress;
.Ve
.PP
Returns true if Compress::Zlib is available, false otherwise.
.PP
\fIcanonicalize_path\fR
.IX Subsection "canonicalize_path"
.PP
.Vb 1
\&    my $canoncalized_path = canonicalize_path($path);
.Ve
.PP
Converts \f(CW$path\fR into a canonical form which is safe to pass to the \s-1SVN
API\s0 as a file path.
.PP
\fIcanonicalize_url\fR
.IX Subsection "canonicalize_url"
.PP
.Vb 1
\&    my $canonicalized_url = canonicalize_url($url);
.Ve
.PP
Converts \f(CW$url\fR into a canonical form which is safe to pass to the \s-1SVN
API\s0 as a \s-1URL.\s0
.PP
\fIjoin_paths\fR
.IX Subsection "join_paths"
.PP
.Vb 1
\&    my $new_path = join_paths(@paths);
.Ve
.PP
Appends \f(CW@paths\fR together into a single path.  Any empty paths are ignored.
.PP
\fIadd_path_to_url\fR
.IX Subsection "add_path_to_url"
.PP
.Vb 1
\&    my $new_url = add_path_to_url($url, $path);
.Ve
.PP
Appends \f(CW$path\fR onto the \f(CW$url\fR.  If \f(CW$path\fR is empty, \f(CW$url\fR is returned unchanged.
