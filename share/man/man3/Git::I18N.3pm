.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::I18N 3pm"
.TH Git::I18N 3pm "2017-06-24" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::I18N \- Perl interface to Git's Gettext localizations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Git::I18N;
\&
\&        print _\|_("Welcome to Git!\en");
\&
\&        printf _\|_("The following error occurred: %s\en"), $error;
\&
\&        printf _\|_n("commited %d file\en", "commited %d files\en", $files), $files;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Git's internal Perl interface to gettext via Locale::Messages. If
Locale::Messages can't be loaded (it's not a core module) we
provide stub passthrough fallbacks.
.PP
This is a distilled interface to gettext, see \f(CW\*(C`info \*(Aq(gettext)Perl\*(Aq\*(C'\fR
for the full interface. This module implements only a small part of
it.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "_\|_($)"
.IX Subsection "__($)"
Locale::Messages's gettext function if all goes well, otherwise our
passthrough fallback function.
.SS "_\|_n($$$)"
.IX Subsection "__n($$$)"
Locale::Messages's ngettext function or passthrough fallback function.
.SS "N_\|_($)"
.IX Subsection "N__($)"
No-operation that only returns its argument. Use this if you want xgettext to
extract the text to the pot template but do not want to trigger retrival of the
translation at run time.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ævar Arnfjörð Bjarmason <avarab@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010 Ævar Arnfjörð Bjarmason <avarab@gmail.com>
